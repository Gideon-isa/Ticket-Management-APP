// <auto-generated />
using System;
using GlobalTicket.TicketManagement.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalTicket.TicketManagement.Persistence.Migrations
{
    [DbContext(typeof(GlobalTicketDbContext))]
    [Migration("20240120102822_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlobalTicket.TicketManagement.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("9299ede7-7918-42d3-80bd-c7c9c9d677a3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Concerts"
                        },
                        new
                        {
                            CategoryId = new Guid("25381df8-c432-4593-bfa8-c567e8434913"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Musicals"
                        },
                        new
                        {
                            CategoryId = new Guid("73d07064-d7fa-42a0-a118-29934d368ec4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Plays"
                        },
                        new
                        {
                            CategoryId = new Guid("eb45ad73-5854-4976-b310-bd4e865afef2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Conferences"
                        });
                });

            modelBuilder.Entity("GlobalTicket.TicketManagement.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("7f3711a8-b788-437f-84a8-7f827dc30f03"),
                            Artist = "John Egbert",
                            CategoryId = new Guid("9299ede7-7918-42d3-80bd-c7c9c9d677a3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 7, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(3969),
                            Description = "Join John for his farwell tour across 15 continents. John really needs no introduction since he has already mesmerized the world with his banjo.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/banjo.jpg",
                            Name = "John Egbert Live",
                            Price = 65
                        },
                        new
                        {
                            EventId = new Guid("467172f5-25aa-44ad-a0cf-c496e11a8f5c"),
                            Artist = "Michael Johnson",
                            CategoryId = new Guid("9299ede7-7918-42d3-80bd-c7c9c9d677a3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 10, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4028),
                            Description = "Michael Johnson doesn't need an introduction. His 25 concert across the globe last year were seen by thousands. Can we add you to the list?",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/michael.jpg",
                            Name = "The State of Affairs: Michael Live!",
                            Price = 85
                        },
                        new
                        {
                            EventId = new Guid("75149ce3-20bf-4045-9ee6-96b86e285906"),
                            Artist = "DJ 'The Mike'",
                            CategoryId = new Guid("9299ede7-7918-42d3-80bd-c7c9c9d677a3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 5, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4058),
                            Description = "DJs from all over the world will compete in this epic battle for eternal fame.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/dj.jpg",
                            Name = "Clash of the DJs",
                            Price = 85
                        },
                        new
                        {
                            EventId = new Guid("a34ee542-e804-40bd-aabd-e52e9459c861"),
                            Artist = "Manuel Santinonisi",
                            CategoryId = new Guid("9299ede7-7918-42d3-80bd-c7c9c9d677a3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 5, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4087),
                            Description = "Get on the hype of Spanish Guitar concerts with Manuel.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/guitar.jpg",
                            Name = "Spanish guitar hits with Manuel",
                            Price = 25
                        },
                        new
                        {
                            EventId = new Guid("0ff6e70d-7518-476c-9394-6d63fdef4491"),
                            Artist = "Many",
                            CategoryId = new Guid("eb45ad73-5854-4976-b310-bd4e865afef2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 11, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4120),
                            Description = "The best tech conference in the world",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/conf.jpg",
                            Name = "Techorama 2021",
                            Price = 400
                        },
                        new
                        {
                            EventId = new Guid("c8599a5d-8d5c-447c-aed0-a3cf037c2201"),
                            Artist = "Nick Sailor",
                            CategoryId = new Guid("25381df8-c432-4593-bfa8-c567e8434913"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 9, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4154),
                            Description = "The critics are over the moon and so will you after you've watched this sing and dance extravaganza written by Nick Sailor, the man from 'My dad and sister'.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/musical.jpg",
                            Name = "To the Moon and Back",
                            Price = 135
                        });
                });

            modelBuilder.Entity("GlobalTicket.TicketManagement.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OrderPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderTotal")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e7d040c-bbfd-475c-bae5-5bb10d4d8feb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4200),
                            OrderTotal = 400,
                            UserId = new Guid("a72c71fd-f736-49cc-997f-a9f55a09edf9")
                        },
                        new
                        {
                            Id = new Guid("4901a19c-c9cd-4cf5-ba00-2f99113f1b69"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4234),
                            OrderTotal = 135,
                            UserId = new Guid("af8d4964-cda6-4ffd-9259-fdc4a41fb279")
                        },
                        new
                        {
                            Id = new Guid("2447f156-f484-48e1-a5aa-f35f457345ff"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4262),
                            OrderTotal = 85,
                            UserId = new Guid("c070d80c-eb47-4748-8a34-b89a2320554a")
                        },
                        new
                        {
                            Id = new Guid("c6448885-4618-499b-970a-144a3d04039d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4292),
                            OrderTotal = 245,
                            UserId = new Guid("7532362f-2f22-49e9-8919-22a210dd4c09")
                        },
                        new
                        {
                            Id = new Guid("e24e71c6-2f23-4840-ba95-9a7da54443aa"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4322),
                            OrderTotal = 142,
                            UserId = new Guid("858811aa-dbe8-40f8-ba31-2724b0093147")
                        },
                        new
                        {
                            Id = new Guid("288d0da0-b1d0-422e-a205-de110989c893"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4355),
                            OrderTotal = 40,
                            UserId = new Guid("326564e5-efa8-4824-aba4-f600cba4ae4c")
                        },
                        new
                        {
                            Id = new Guid("f44cc385-d7ea-4071-ac21-bf8c4f13eb52"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2024, 1, 20, 11, 28, 21, 972, DateTimeKind.Local).AddTicks(4801),
                            OrderTotal = 116,
                            UserId = new Guid("a6f12d87-bc5c-4fb0-906b-4c5b99415aa1")
                        });
                });

            modelBuilder.Entity("GlobalTicket.TicketManagement.Domain.Entities.Event", b =>
                {
                    b.HasOne("GlobalTicket.TicketManagement.Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GlobalTicket.TicketManagement.Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
